package com.xht97.photosaying.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Integer> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MessageId = new Property(0, int.class, "messageId", true, "MESSAGE_ID");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property Text = new Property(2, String.class, "text", false, "TEXT");
        public final static Property Audio = new Property(3, String.class, "audio", false, "AUDIO");
        public final static Property Photo = new Property(4, String.class, "photo", false, "PHOTO");
        public final static Property Like = new Property(5, int.class, "like", false, "LIKE");
        public final static Property Transmit = new Property(6, int.class, "transmit", false, "TRANSMIT");
        public final static Property Reply = new Property(7, int.class, "reply", false, "REPLY");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"MESSAGE_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: messageId
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"TEXT\" TEXT," + // 2: text
                "\"AUDIO\" TEXT," + // 3: audio
                "\"PHOTO\" TEXT," + // 4: photo
                "\"LIKE\" INTEGER NOT NULL ," + // 5: like
                "\"TRANSMIT\" INTEGER NOT NULL ," + // 6: transmit
                "\"REPLY\" INTEGER NOT NULL );"); // 7: reply
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
        stmt.bindLong(2, entity.getUserId());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(4, audio);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
        stmt.bindLong(6, entity.getLike());
        stmt.bindLong(7, entity.getTransmit());
        stmt.bindLong(8, entity.getReply());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getMessageId());
        stmt.bindLong(2, entity.getUserId());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(3, text);
        }
 
        String audio = entity.getAudio();
        if (audio != null) {
            stmt.bindString(4, audio);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(5, photo);
        }
        stmt.bindLong(6, entity.getLike());
        stmt.bindLong(7, entity.getTransmit());
        stmt.bindLong(8, entity.getReply());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.getInt(offset + 0), // messageId
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // text
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // audio
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // photo
            cursor.getInt(offset + 5), // like
            cursor.getInt(offset + 6), // transmit
            cursor.getInt(offset + 7) // reply
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setMessageId(cursor.getInt(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setText(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAudio(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLike(cursor.getInt(offset + 5));
        entity.setTransmit(cursor.getInt(offset + 6));
        entity.setReply(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Message entity, long rowId) {
        return entity.getMessageId();
    }
    
    @Override
    public Integer getKey(Message entity) {
        if(entity != null) {
            return entity.getMessageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
